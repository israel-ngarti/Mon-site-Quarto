[
  {
    "objectID": "Statistiques Descriptives.html",
    "href": "Statistiques Descriptives.html",
    "title": "STATISTIQUES DESCRIPTIVES",
    "section": "",
    "text": "Statistiques descriptives de n_patents\n\n\nMoyenne\nEcart_Type\nValeurs_Manquantes\nMinimum\nMaximum\n\n\n\n\n11.31783\n111.9308\n0\n1\n4870\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTop 5 des enttreprises ayant déposées le plus de brevets\n\n\nfirm_name\nn_patents\n\n\n\n\ncommissariat a l'energie atomique et aux energies alternatives\n4870\n\n\ncnrs\n4247\n\n\nalcatel\n3181\n\n\nmichelin\n2820\n\n\nsafran\n2379\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTop 5 des descriptions des IPC principaux les plus frequents\n\n\nipc_main_desc\ncount\n\n\n\n\nDIAGNOSIS; SURGERY; IDENTIFICATION (analysing biological material G01N\n571\n\n\nSPECIFIC THERAPEUTIC ACTIVITY OF CHEMICAL COMPOUNDS OR MEDICINAL PREPARATIONS\n553\n\n\nCONTAINERS FOR STORAGE OR TRANSPORT OF ARTICLES OR MATERIALS\n287\n\n\nFILTERS IMPLANTABLE INTO BLOOD VESSELS; PROSTHESES; DEVICES PROVIDING PATENCY TO\n278\n\n\nTRANSMISSION OF DIGITAL INFORMATION\n258\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTop 5 des departements principaux les plus frequents\n\n\naddr_dept_main\ncount\n\n\n\n\n75\n957\n\n\n92\n495\n\n\n69\n436\n\n\n13\n330\n\n\n38\n286\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTop 5 des villes principales les plus frequentes\n\n\naddr_city_main\ncount\n\n\n\n\nParis\n965\n\n\nLyon\n119\n\n\nMarseille\n114\n\n\nToulouse\n102\n\n\nMontpellier\n86\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStatistique n_offres\n\n\nMoyenne\nEcart_Type\nValeurs_Manquantes\nMinimum\nMaximum\n\n\n\n\n4.272468\n8.370608\n0\n1\n68\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStatistiques des salaires moyens\n\n\nMoyenne\nEcart_Type\nValeurs_Manquantes\nMinimum\nMaximum\n\n\n\n\n53230.29\n15090.82\n558\n9600\n1e+05\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTop 5 des entreprises ayant fait beaucoup d'offfres d'emploi\n\n\nfirm_name\nn_offres\n\n\n\n\ncgi\n68\n\n\ncapgemini\n63\n\n\naccenture france\n60\n\n\nalten\n48\n\n\ndata recrutement\n46\n\n\n\n\n\n\n\n\n\n\n\n\nTop 5 des secteurs principaux les plus frequents\n\n\nsector_main\ncount\n\n\n\n\nSecteur informatique, ESN\n108\n\n\nServices aux Entreprises\n39\n\n\nBanque, Assurance, Finance\n24\n\n\nDistribution, Commerce de gros\n20\n\n\nMédia, Internet, Communication\n17\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTop 5 des départements les plus fréquents\n\n\naddr_dept_main\ncount\n\n\n\n\n75\n207\n\n\n92\n90\n\n\n59\n41\n\n\n69\n32\n\n\n44\n26\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStatistique n_offres de la fusion des bases\n\n\nMoyenne\nEcart_Type\nValeurs_Manquantes\nMinimum\nMaximum\n\n\n\n\n4.27027\n8.35882\n8187\n1\n68\n\n\n\n\n\n\n\n\n\n\n\n\nStatistique salaire moyen de la fusion des bases\n\n\nMoyenne\nEcart_Type\nValeurs_Manquantes\nMinimum\nMaximum\n\n\n\n\n53230.29\n15090.82\n8747\n9600\n1e+05\n\n\n\n\n\n\n\n\n\n\n\n\nStatistique n_patents de la table fusionnée\n\n\nMoyenne\nEcart_Type\nValeurs_Manquantes\nMinimum\nMaximum\n\n\n\n\n11.43415\n112.4239\n651\n1\n4870"
  },
  {
    "objectID": "Statistiques Descriptives.html#base-emploi",
    "href": "Statistiques Descriptives.html#base-emploi",
    "title": "STATISTIQUES DESCRIPTIVES",
    "section": "",
    "text": "Statistique n_offres\n\n\nMoyenne\nEcart_Type\nValeurs_Manquantes\nMinimum\nMaximum\n\n\n\n\n4.272468\n8.370608\n0\n1\n68\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStatistiques des salaires moyens\n\n\nMoyenne\nEcart_Type\nValeurs_Manquantes\nMinimum\nMaximum\n\n\n\n\n53230.29\n15090.82\n558\n9600\n1e+05\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTop 5 des entreprises ayant fait beaucoup d'offfres d'emploi\n\n\nfirm_name\nn_offres\n\n\n\n\ncgi\n68\n\n\ncapgemini\n63\n\n\naccenture france\n60\n\n\nalten\n48\n\n\ndata recrutement\n46\n\n\n\n\n\n\n\n\n\n\n\n\nTop 5 des secteurs principaux les plus frequents\n\n\nsector_main\ncount\n\n\n\n\nSecteur informatique, ESN\n108\n\n\nServices aux Entreprises\n39\n\n\nBanque, Assurance, Finance\n24\n\n\nDistribution, Commerce de gros\n20\n\n\nMédia, Internet, Communication\n17\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTop 5 des départements les plus fréquents\n\n\naddr_dept_main\ncount\n\n\n\n\n75\n207\n\n\n92\n90\n\n\n59\n41\n\n\n69\n32\n\n\n44\n26"
  },
  {
    "objectID": "Statistiques Descriptives.html#base-emp_inno",
    "href": "Statistiques Descriptives.html#base-emp_inno",
    "title": "STATISTIQUES DESCRIPTIVES",
    "section": "",
    "text": "Statistique n_offres de la fusion des bases\n\n\nMoyenne\nEcart_Type\nValeurs_Manquantes\nMinimum\nMaximum\n\n\n\n\n4.27027\n8.35882\n8187\n1\n68\n\n\n\n\n\n\n\n\n\n\n\n\nStatistique salaire moyen de la fusion des bases\n\n\nMoyenne\nEcart_Type\nValeurs_Manquantes\nMinimum\nMaximum\n\n\n\n\n53230.29\n15090.82\n8747\n9600\n1e+05\n\n\n\n\n\n\n\n\n\n\n\n\nStatistique n_patents de la table fusionnée\n\n\nMoyenne\nEcart_Type\nValeurs_Manquantes\nMinimum\nMaximum\n\n\n\n\n11.43415\n112.4239\n651\n1\n4870"
  },
  {
    "objectID": "base_emp.html",
    "href": "base_emp.html",
    "title": "base_emp",
    "section": "",
    "text": "Chargement des packages\n\nlibrary(dplyr)\n\nWarning: le package 'dplyr' a été compilé avec la version R 4.4.2\n\n\n\nAttachement du package : 'dplyr'\n\n\nLes objets suivants sont masqués depuis 'package:stats':\n\n    filter, lag\n\n\nLes objets suivants sont masqués depuis 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(readr)\n\nWarning: le package 'readr' a été compilé avec la version R 4.4.2\n\nlibrary(stringr)\n\nWarning: le package 'stringr' a été compilé avec la version R 4.4.2\n\nlibrary(tidyr)\n\nWarning: le package 'tidyr' a été compilé avec la version R 4.4.2\n\nlibrary(stringi)\n\n\nemp_offers &lt;- read_csv(\"data/emp_offers_fmt.tsv\", show_col_types = FALSE)\n\n\n# Avoir la liste des entreprises\ndistinct(emp_offers, entreprise, .keep_all = FALSE)\n\n# A tibble: 801 × 1\n   entreprise                   \n   &lt;chr&gt;                        \n 1 Safran                       \n 2 Orano                        \n 3 Cdiscount                    \n 4 Docaposte                    \n 5 LHH Recruitment Solutions    \n 6 Assurances Crédit Mutuel  GIE\n 7 Team.is                      \n 8 Akkodis                      \n 9 Reactis Services             \n10 Solutec                      \n# ℹ 791 more rows\n\n\n\n# Harmoniser les noms des entreprises\n# Suppression des éléments tels que \"SA\", \"Inc\", etc., pour uniformiser\n emp_offers_clean &lt;- emp_offers %&gt;%\n  mutate(\n    entreprise = str_to_lower(entreprise), # Mettre en minuscule\n    entreprise = stri_trans_general(entreprise, \"Latin-ASCII\"), # Supprimer accents\n    entreprise = str_trim(entreprise), # Supprimer espaces inutiles\n    entreprise = str_replace_all(entreprise, \"\\\\s*(sa|inc|ltd|sarl|sas|gmbh|plc|corp)\\\\s*$\", \"\"), # Supprimer suffixes\n    entreprise = str_squish(entreprise), # Supprimer espaces multiples\n    entreprise = case_when(\n      str_detect(entreprise, \"axa assurances|axa funds management|axa partners|axa en france\") ~ \"axa\",\n      str_detect(entreprise, \"bouygues construction it|bouygues telecom|bouygues travaux publics\") ~ \"bouygues\",\n      str_detect(entreprise, \"ab science|ab tasty\") ~ \"ab\",\n      str_detect(entreprise, \"airbus helicopters\") ~ \"airbus\",\n      str_detect(entreprise, \"auchan retail internationa|auchan retail france\") ~ \"auchan\",\n      str_detect(entreprise, \"banque populaire rives de paris|banque populaire mediteranee\") ~ \"banque populaire\",\n      str_detect(entreprise, \"bouygues construction it|bouygues telecom|bouygues travaux publics\") ~ \"bouygues\",\n      str_detect(entreprise, \"credit agricole consumer finance|credit agricole assurances|credit agricole centre loire|credit agricole cib|credit agricole des regions du centre|credit agricole du nord est|credit agricole s.a.|credit agricole champagne bourgogne|credit agricole group infrastructure plateform\") ~ \"credit agricole\",\n      str_detect(entreprise, \"free mobile|free reseau\") ~ \"free\",\n      str_detect(entreprise, \"societe generale|societe generale securities services\") ~ \"societe generale\",\n      str_detect(entreprise, \"groupama asset management|groupama assurances mutuelles|groupama gan vie|groupama rhone alpes auvergne|groupama supports et services|groupama centre manche\") ~ \"groupama\",\n      str_detect(entreprise, \"cdiscount stage\") ~ \"cdiscount\",\n      str_detect(entreprise, \"capgemini invent\") ~ \"capgemini\",\n      str_detect(entreprise, \"octopus energy|octopus energy group|octopus it\") ~ \"octopus\",\n      str_detect(entreprise, \"dassault aviation|dassault systemes\") ~ \"dassault\",\n      str_detect(entreprise, \"vinci autoroutes|vinci construction|vinci energies\") ~ \"vinci\",\n      str_detect(entreprise, \"sii atlantique|sii est|sii ouest|sii ile de france|sii nord|sii ouest|sii technologies gmbh hr-service\") ~ \"sii\",\n      str_detect(entreprise, \"caisse d'epargne grand est europe|caisse d'epargne rhone | caisse d'epargne aquitaine poitou charentes\") ~ \"caisse d'epargne\",\n      str_detect(entreprise, \"bpce solutions informatiques\") ~ \"bpce\",\n      str_detect(entreprise, \"centre hospitalier departemental de vendee|centre hospitalier departemental de vendee site de la roche sur yon\") ~ \"centre hospitalier departemental de vendee\",\n      str_detect(entreprise, \"cls - collecte localisation satellites \") ~ \"cls\",\n      str_detect(entreprise, \"davidson consulting\") ~ \"davidson\",\n      str_detect(entreprise, \"somfy group\") ~ \"somfy\",\n      str_detect(entreprise, \"publicis sapient |publicis groupe\") ~ \"publicis\",\n      str_detect(entreprise, \"talan consulting\") ~ \"talan\",\n      str_detect(entreprise, \"veepee_france\") ~ \"veepee\",\n      str_detect(entreprise, \"altelios technology group\") ~ \"altelios technology\",\n       str_detect(entreprise, \"team.is\") ~ \"team is\",\n       str_detect(entreprise, \"sncf connect & tech\") ~ \"sncf\",\n       str_detect(entreprise, \"orange business\") ~ \"orange \",\n       str_detect(entreprise, \"onepoint group\") ~ \"onepoint\",\n       str_detect(entreprise, \"cgi finance\") ~ \"cgi\",\n\n      TRUE ~ entreprise # Garder inchangé si aucune règle ne s'applique\n    )\n  ) %&gt;%\n  \n filter(!is.na(entreprise) & entreprise != \"\") # Supprimer les lignes vides ou NA\n\n\n# 3. Suppression des entreprises proposant des freelances\nemp_offers_clean &lt;- emp_offers_clean %&gt;%\n  filter(!if_any(c(entreprise, intitule_poste), \n                 ~ str_detect(., regex(\"freelance\", ignore_case = TRUE))))  \n\n\n# 1. Calcul du nombre d'offres par entreprise\nbase_emp &lt;- emp_offers_clean %&gt;%\n  group_by(entreprise) %&gt;%\n  summarise(\n    firm_name = first(entreprise),\n    n_offres = n(),\n    .groups = \"drop\"\n  )\n\n\n# 2. Identification du secteur principal d'activité\n# Sélectionner le secteur le plus fréquent pour chaque entreprise\nsector_main &lt;- emp_offers_clean %&gt;%\n  filter(!is.na(secteur) & secteur != \"\") %&gt;%\n  group_by(entreprise, secteur) %&gt;%\n  summarise(sector_count = n(), .groups = \"drop\") %&gt;%\n  arrange(desc(sector_count)) %&gt;%\n  group_by(entreprise) %&gt;%\n  slice(1) %&gt;%\n  select(entreprise, sector_main = secteur)\n\n# Ajout de la colonne sector_main à base_emp\nbase_emp &lt;- base_emp %&gt;%\n  left_join(sector_main, by = \"entreprise\")\n\n\n# 3. Calcul de l'expérience moyenne requise pour chaque entreprise\nexp_moyenne &lt;- emp_offers_clean %&gt;%\n  filter(!is.na(experience_requise)) %&gt;%\n  group_by(entreprise) %&gt;%\n  summarise(avg_req_exp = mean(experience_requise, na.rm = TRUE), .groups = \"drop\")\n\nbase_emp &lt;- base_emp %&gt;%\n  left_join(exp_moyenne, by = \"entreprise\")\n\n\n# 4. Extraction de la compétence principale (top_skill_req) pour chaque entreprise\n# Séparer les compétences en lignes distinctes pour chaque compétence\ndata_skills &lt;- emp_offers_clean %&gt;%\n  separate_rows(competences_requises, sep = \",\\\\s*\") %&gt;%\n  mutate(competences_requises = str_trim(competences_requises))\n\n# Calculer la compétence la plus fréquente pour chaque entreprise\ntop_skills &lt;- data_skills %&gt;%\n  group_by(entreprise, competences_requises) %&gt;%\n  summarise(skill_count = n(), .groups = \"drop\") %&gt;%\n  arrange(desc(skill_count)) %&gt;%\n  group_by(entreprise) %&gt;%\n  summarise(top_skill_req = paste(unique(competences_requises[skill_count == max(skill_count)]), collapse = \", \"), .groups = \"drop\")\n\nbase_emp &lt;- base_emp %&gt;%\n  left_join(top_skills, by = \"entreprise\")\n\n\n# Étape 1: Nettoyage et préparation des salaires\nsalaire_base &lt;- emp_offers_clean %&gt;%\n  select(entreprise, salaire) %&gt;% # Sélectionner uniquement les colonnes nécessaires\n  mutate(\n    # Nettoyage de la colonne salaire\n    salaire_clean = str_replace_all(salaire, \"EUR par an|EUR par mois|par an|par mois|\\\\s\", \"\"),\n    # Supprimer \"de\" au début des chaînes de caractères\n    salaire_clean = str_replace_all(salaire_clean, \"de\\\\s+\", \"\"),\n    # Remplacer \"à\" par \"-\"\n    salaire_clean = str_replace_all(salaire_clean, \"à\", \"-\")\n  )\n\n\nsalaire_base &lt;- salaire_base %&gt;%\n  mutate(\n    # Extraire la deuxième valeur (borne max du salaire) après \"-\"\n    max_salaire = as.numeric(str_extract(salaire_clean, \"(?&lt;=-)[0-9]+\"))\n  )\n\n\nsalaire_base &lt;- salaire_base %&gt;%\n  group_by(entreprise) %&gt;% # Grouper par entreprise\n  summarise(\n    avg_wage = mean(max_salaire, na.rm = TRUE), # Calculer la moyenne des salaires max\n    .groups = \"drop\" # Désactiver le regroupement\n  ) %&gt;%\n  mutate(\n    # Remplacer les valeurs NaN par NA\n    avg_wage = ifelse(is.nan(avg_wage), NA, avg_wage)\n  )\n\n\nsalaire_base &lt;- salaire_base %&gt;%\n  mutate(\n    avg_wage = case_when(\n     # Salaires entre 30 et 200 : considérés comme abrégés (en milliers)\n      avg_wage &gt;= 30 & avg_wage &lt; 200 & !is.na(avg_wage) ~ avg_wage * 1000,\n      \n     # Salaires entre 10000 et 3000 : considérés comme mensuels, conversion en annuel\n      avg_wage &lt;= 10000 & avg_wage &gt;=1000 & !is.na(avg_wage) ~ avg_wage * 12,\n      avg_wage &lt;= 800 & avg_wage &gt;=500 & !is.na(avg_wage) ~ avg_wage * 360,\n      # Salaires déjà en milliers : ne rien modifier\n      TRUE ~ avg_wage\n    )\n  )\n\n\n#5\n# Calcul du salaire moyen pour chaque entreprise\nsalaire_base &lt;- emp_offers_clean %&gt;%\n  select(entreprise, salaire) %&gt;% # Sélectionner uniquement les colonnes nécessaires\n  mutate(\n    # Nettoyage de la colonne salaire\n    salaire_clean = str_replace_all(salaire, \"EUR par an|EUR par mois|par an|par mois|\\\\s\", \"\"),\n    salaire_clean = str_replace_all(salaire_clean, \"de\\\\s+\", \"\"), # Supprimer \"de\" au début\n    salaire_clean = str_replace_all(salaire_clean, \"à\", \"-\"), # Remplacer \"à\" par \"-\"\n    \n    # Extraction des bornes max\n    max_salaire = as.numeric(str_extract(salaire_clean, \"(?&lt;=-)[0-9]+\")), # Deuxième valeur\n    \n   \n  ) %&gt;%\n  group_by(entreprise) %&gt;%\n  summarise(\n    avg_wage = mean(max_salaire, na.rm = TRUE), # Calculer le salaire moyen par entreprise\n    .groups = \"drop\"\n  ) %&gt;%\n  mutate(\n    avg_wage = ifelse(is.nan(avg_wage), NA, avg_wage) # Remplacer NaN par NA\n  )\n# Harmoniser les salaires en milliers \nsalaire_base &lt;- salaire_base %&gt;%\n   mutate(\n    avg_wage = case_when(\n      # Salaires inférieurs à 500 sont abrégés (46 devient 46000)\n      avg_wage &lt; 500 & !is.na(avg_wage) ~ avg_wage * 1000,\n      \n      # Salaires mensuels inférieurs à 10 000 : convertir en annuel\n      avg_wage &gt;= 700 & avg_wage &lt; 10000 ~ avg_wage * 12,\n      \n      # Salaires déjà en milliers : ne pas modifier\n      TRUE ~ avg_wage\n    )\n  )\n\n\nbase_emp &lt;- base_emp %&gt;%\n  left_join(salaire_base, by = \"entreprise\")\n\n\n# 6. Identification du département principal\ndept_main &lt;- emp_offers_clean %&gt;%\n  filter(!is.na(departement)) %&gt;%\n  group_by(entreprise, departement) %&gt;%\n  summarise(dept_count = n(), .groups = \"drop\") %&gt;%\n  arrange(desc(dept_count)) %&gt;%\n  group_by(entreprise) %&gt;%\n  slice(1) %&gt;%\n  select(entreprise, addr_dept_main = departement)\n\nbase_emp &lt;- base_emp %&gt;%\n  left_join(dept_main, by = \"entreprise\")\n\n\nbase_emp$entreprise=NULL\n\n\n# Vérifier les résultats\nhead(base_emp)\n\n# A tibble: 6 × 7\n  firm_name          n_offres sector_main     avg_req_exp top_skill_req avg_wage\n  &lt;chr&gt;                 &lt;int&gt; &lt;chr&gt;                 &lt;dbl&gt; &lt;chr&gt;            &lt;dbl&gt;\n1 1dsolutions               2 &lt;NA&gt;                     NA équipe              NA\n2 1g-link consulting        2 &lt;NA&gt;                     NA Python, SQL,…    57500\n3 52 entertainment          7 &lt;NA&gt;                      3 A/B Testing,…       NA\n4 ab                        3 Secteur inform…          NA Database, Op…       NA\n5 abeille assurances        2 &lt;NA&gt;                     NA Deep Learnin…       NA\n6 abil ressources           1 Services aux E…           1 Deep Learning    55000\n# ℹ 1 more variable: addr_dept_main &lt;dbl&gt;\n\n\n\n# Exportation de la base_emp au format CSV\nwrite.csv(base_emp, \"base_emp.csv\", row.names = FALSE)\n\n#APPARIEMENT DES DEUX BASES\nPour réaliser l’appariement des deux bases de données, brevets et emploi, nous avons utilisé la fonction full_join en nous appuyant sur la variable commune firm_name.\n\nbase_brevets &lt;- read_csv(\"data/base_brevets.csv\", show_col_types = FALSE)\n\n\nbase_emp_inno &lt;- full_join(base_brevets, base_emp, by = \"firm_name\")\n\n# Vérification des premières lignes\nhead(base_emp_inno)\n\n# A tibble: 6 × 14\n  firm_name                n_patents ipc_main_code ipc_main_desc ipc_second_code\n  &lt;chr&gt;                        &lt;dbl&gt; &lt;chr&gt;         &lt;chr&gt;         &lt;chr&gt;          \n1 'add-one'                        1 A62B          DEVICES       &lt;NA&gt;           \n2 'apollon solar'                  9 H01L          SEMICONDUCTO… &lt;NA&gt;           \n3 's.a.g.a.c.e.' services…         1 B09B          DISPOSAL OF … &lt;NA&gt;           \n4 1/4 vin                          4 B65B          MACHINES      &lt;NA&gt;           \n5 10-vins                          1 B01F          MIXING        &lt;NA&gt;           \n6 1st surgiconcept                 2 A61B          DIAGNOSIS; S… A61L           \n# ℹ 9 more variables: ipc_second_desc &lt;chr&gt;, addr_city_main &lt;chr&gt;,\n#   addr_dept_main.x &lt;dbl&gt;, n_offres &lt;int&gt;, sector_main &lt;chr&gt;,\n#   avg_req_exp &lt;dbl&gt;, top_skill_req &lt;chr&gt;, avg_wage &lt;dbl&gt;,\n#   addr_dept_main.y &lt;dbl&gt;\n\n\n\n# Exportation de la base_emp_inno au format CSV\nwrite.csv(base_emp_inno, \"base_emp_inno.csv\", row.names = FALSE)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "base_brevets.html",
    "href": "base_brevets.html",
    "title": "Base_brevet",
    "section": "",
    "text": "Importation des library\n\nlibrary(dplyr)\n\nWarning: le package 'dplyr' a été compilé avec la version R 4.4.2\n\n\n\nAttachement du package : 'dplyr'\n\n\nLes objets suivants sont masqués depuis 'package:stats':\n\n    filter, lag\n\n\nLes objets suivants sont masqués depuis 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(data.table)\n\nWarning: le package 'data.table' a été compilé avec la version R 4.4.2\n\n\n\nAttachement du package : 'data.table'\n\n\nLes objets suivants sont masqués depuis 'package:dplyr':\n\n    between, first, last\n\nlibrary(stringi)\nlibrary(stringr)\n\nWarning: le package 'stringr' a été compilé avec la version R 4.4.2\n\nlibrary(dplyr) \nlibrary(readr)\n\nWarning: le package 'readr' a été compilé avec la version R 4.4.2\n\nlibrary(stringr)\nlibrary(tidyr)\n\nWarning: le package 'tidyr' a été compilé avec la version R 4.4.2\n\nlibrary(stringi)\nlibrary(data.table)\nlibrary(knitr)  \nlibrary(kableExtra) \n\nWarning: le package 'kableExtra' a été compilé avec la version R 4.4.2\n\n\n\nAttachement du package : 'kableExtra'\n\n\nL'objet suivant est masqué depuis 'package:dplyr':\n\n    group_rows\n\nlibrary(wordcloud)\n\nWarning: le package 'wordcloud' a été compilé avec la version R 4.4.2\n\n\nLe chargement a nécessité le package : RColorBrewer\n\nlibrary(tidytext)\n\nWarning: le package 'tidytext' a été compilé avec la version R 4.4.2\n\nlibrary(ggplot2)\nlibrary(wordcloud2)\n\nWarning: le package 'wordcloud2' a été compilé avec la version R 4.4.2\n\nlibrary(RColorBrewer)\nlibrary(viridis)\n\nWarning: le package 'viridis' a été compilé avec la version R 4.4.2\n\n\nLe chargement a nécessité le package : viridisLite\n\nlibrary(tidytext)\nlibrary(stopwords)\n\nWarning: le package 'stopwords' a été compilé avec la version R 4.4.2\n\n\nImportation des données Données brutes\nChargements des données sur : - entreprises et brevets - brevets : informations complementaires sur les brevets - IPC code: IPC des brevets et leurs descriptions\n\n#Importation des données\n\nent_brevets &lt;- read.csv(\"data/OECD/EPO_App_reg_small.txt\", header = TRUE)\n\nbrevets &lt;- read.csv(\"data/OECD/EPO_IPC_small.txt\", header = TRUE)\n\nIPC_A&lt;- read.table(\"data/EN_ipc_title_list_20120101/EN_ipc_section_A_title_list_20120101.txt\", header = TRUE, sep = \"\\t\", fill = TRUE)\nIPC_B&lt;- read.table(\"data/EN_ipc_title_list_20120101/EN_ipc_section_B_title_list_20120101.txt\", header = TRUE, sep = \"\\t\", fill = TRUE)\nIPC_C&lt;- read.table(\"data/EN_ipc_title_list_20120101/EN_ipc_section_C_title_list_20120101.txt\", header = TRUE, sep = \"\\t\", fill = TRUE)\n\nWarning in scan(file = file, what = what, sep = sep, quote = quote, dec = dec,\n: Fin de fichier (EOF) dans une chaîne de caractères entre guillements\n\nIPC_D&lt;- read.table(\"data/EN_ipc_title_list_20120101/EN_ipc_section_D_title_list_20120101.txt\", header = TRUE, sep = \"\\t\", fill = TRUE)\nIPC_E&lt;- read.table(\"data/EN_ipc_title_list_20120101/EN_ipc_section_E_title_list_20120101.txt\", header = TRUE, sep = \"\\t\", fill = TRUE)\nIPC_F&lt;- read.table(\"data/EN_ipc_title_list_20120101/EN_ipc_section_F_title_list_20120101.txt\", header = TRUE, sep = \"\\t\", fill = TRUE)\nIPC_G&lt;- read.table(\"data/EN_ipc_title_list_20120101/EN_ipc_section_G_title_list_20120101.txt\", header = TRUE, sep = \"\\t\", fill = TRUE)\n\nWarning in scan(file = file, what = what, sep = sep, quote = quote, dec = dec,\n: Fin de fichier (EOF) dans une chaîne de caractères entre guillements\n\nIPC_H&lt;- read.table(\"data/EN_ipc_title_list_20120101/EN_ipc_section_H_title_list_20120101.txt\", header = TRUE, sep = \"\\t\", fill = TRUE)\n\nWarning in scan(file = file, what = what, sep = sep, quote = quote, dec = dec,\n: Fin de fichier (EOF) dans une chaîne de caractères entre guillements\n\n\nHarmoniser les noms des entreprises\n\n# Suppression des éléments tels que \"SA\", \"Inc\", etc., pour uniformiser\n ent_brevets_clean &lt;- ent_brevets %&gt;%\n  mutate(\n   app_name = str_to_lower(app_name), # Mettre en minuscule\n   app_name = stri_trans_general(app_name, \"Latin-ASCII\"), # Supprimer accents\n   app_name = str_trim(app_name), # Supprimer espaces inutiles\n   app_name = str_replace_all(app_name, \"\\\\s*(s.a.s.|s.a.|sa|inc|ltd|sarl|sas|gmbh|plc|corp)\\\\s*$\", \"\"), # Supprimer suffixes\n   app_name = str_replace_all(app_name, \"\\\\s*\\\\(.*?\\\\)\", \"\"), # Supprimer tout ce qui est entre parenthèses\n   app_name = str_squish(app_name), # Supprimer espaces multiples\n   app_name = case_when(\n      str_detect(app_name, \"bouygues construction|bouygues construction materiel|bouygues telecom|bouygues immobilier|bouygues travaux publics|bouygues batiment|bouygues energies & services|bouygues energies et services|bouygues offshores|bouygues s.a.\") ~ \"bouygues\",\n      str_detect(app_name, \"bnp paribas asset management\") ~ \"bnp paribas\",\n      str_detect(app_name, \"l'oreal, s.a.|l'oreal,\") ~ \"l'oreal\",\n      str_detect(app_name, \"airbus operations|airbus defence and space|airbus france|airbus espana, s.I.|airbus (s.a.s.)|airbus operations (sas)|airbus france(societe par actions simplifiees)|airbus societe par actions simplifiees|airbus cybersecurity|airbus helicopters|airbus operations|aerospatiale matra airbus|airbus france|airbus(sas)|airbus ds|airbus ds slc|airbus group|airbus interiors services|airbus oneweb satellites|airbus safran launchers|airbus ds electronics and border security\") ~ \"airbus\",\n      str_detect(app_name, \"atos integration|atos worldgrid sl|atos worldgrid|atos global delevery center polska sp.z o.o.sp.k.|atos se|atos services|atos environnement\") ~ \"atos\",\n      str_detect(app_name, \"peugeot citroen automobiles|peugeot citroen automobiles|peugeot citroen automobiles société anonyme|automobiles peugeot|acier et outillage peugeot societe dites:|peugeot motocycles|peugeot saveurs|peugeot saveurs snc\") ~ \"peugeot\",\n      str_detect(app_name, \"alcatel lucent|alcatel lucent, s.a.|alcatal mobile communication france|alcatal alsthom compagnie general d'electricite|alcatel submarine networks|alcatel- lucent shanghai bell co.,|alcatel-lucent\") ~ \"alcatel\",\n        str_detect(app_name, \"orange vallee\") ~ \"orange \",\n      str_detect(app_name, \"thales (dis|alenia|seso|invest)\") ~ \"thales\",\n      str_detect(app_name, \"air liquide|l'air liquide\") ~ \"air liquide\",\n      str_detect(app_name, \"dassault aviation|dassault systemes\") ~ \"dassault aviation\",\n      str_detect(app_name, \"areva (mines|creusot forge|nc|renewables|np)\") ~ \"areva\",\n      str_detect(app_name, \"alstom (transport|renewable|hydro france|aptis)\") ~ \"alstom\",\n      str_detect(app_name, \"cpe lyon formation continue\") ~ \"cpe lyon\",\n      str_detect(app_name, \"centre national de la recherche scientifique|cnrs\") ~ \"cnrs\",\n      str_detect(app_name, \"renault (s.a.s.|trucks|tech|defense)|renault s.a.s\") ~ \"renault\",\n      str_detect(app_name, \"thomson licensing dtv\") ~ \"thomson licensing\",\n      str_detect(app_name, \"alcatel lucent|alcatel submarine networks|alcatel-lucent\") ~ \"alcatel\",\n      str_detect(app_name, \"total energies nouvelles activites u|total marketing services|total petrochemicals france|total raffinage & marketing|total raffinage chimie|   \ntotal raffinage france|total raffinage marketing|total se|total solar international|total raffinage france\") ~ \"total\",\n      str_detect(app_name, \"sanofi biotechnology|   sanofi mature ip|sanofi pasteur|sanofi-aventis\") ~ \"sanofi\",\n      str_detect(app_name, \"compagnie generale des etablissement michelin-michelin & cie|compagnie generale des etablissements michelin|michelin travel partner\") ~ \"michelin\",\n      str_detect(app_name, \"compagnie gervais danone\") ~ \"danone\",\n      str_detect(app_name, \"engie home services\") ~ \"engie\",\n      str_detect(app_name, \"legrand france|legrand snc\") ~ \"legrand\",\n      str_detect(app_name, \"safran aerosystems|safran aerotechnics|safran aircraft engines|safran ceramics|safran data systems|safran electrical & power|safran electronics & defense|safran electronics & defense cockpit solutions|safran filtration systems| safran helicopter engines|safran identity & security|safran landing system|safran landing systems|safran nacelles|safran nacelles|safran seats| safran transmission systems|safran ventilation systems|safran helicopter engines|safran power units|safran transmission systems|airbus safran launchers\") ~ \"safran\",\n      str_detect(app_name, \"veolia eau - compagnie generale des eaux|veolia environnement-ve|veolia proprete|veolia water solutions & technologies support| veolia water solutions & technologies support,\") ~ \"veolia\",\n       str_detect(app_name, \"vinci construction|vinci environnement\") ~ \"vinci\",\n    TRUE ~ app_name # Garder inchangé si aucune règle ne s'applique\n   ) \n  ) %&gt;%\n  \n filter(!is.na(app_name) & app_name != \"\") # Supprimer les lignes vides ou NA\n\n\n# Filtrage des sections IPC pour ne garder que celles avec un code de 4 caractères\nIPC_A = subset(IPC_A, nchar(A) == 4)\nIPC_B = subset(IPC_B, nchar(B) == 4)\nIPC_C = subset(IPC_C, nchar(C) == 4)\nIPC_D = subset(IPC_D, nchar(D) == 4)\nIPC_E = subset(IPC_E, nchar(E) == 4)\nIPC_F = subset(IPC_F, nchar(F) == 4)\nIPC_G = subset(IPC_G, nchar(G) == 4)\nIPC_H = subset(IPC_H, nchar(H) == 4)\n\n\n## # Harmonisation des noms de colonnes pour chaque section\n\ncolnames(IPC_A) &lt;- c(\"IPC\", \"IPC_description\")\ncolnames(IPC_B) &lt;- c(\"IPC\", \"IPC_description\")\ncolnames(IPC_C) &lt;- c(\"IPC\", \"IPC_description\")\ncolnames(IPC_D) &lt;- c(\"IPC\", \"IPC_description\")\ncolnames(IPC_E) &lt;- c(\"IPC\", \"IPC_description\")\ncolnames(IPC_F) &lt;- c(\"IPC\", \"IPC_description\")\ncolnames(IPC_G) &lt;- c(\"IPC\", \"IPC_description\")\ncolnames(IPC_H) &lt;- c(\"IPC\", \"IPC_description\")\n\n# Fusion de toutes les sections en une seule table\nipc_descriptions &lt;- rbind(IPC_A, IPC_B, IPC_C, IPC_D, IPC_E, IPC_F, IPC_G, IPC_H)\n\nFiltrer les données en France entre 2010 et 2020\n\nent_fr &lt;- subset(ent_brevets_clean, ent_brevets_clean$ctry==\"FR\")\n\nent_brevets_10_20 &lt;- brevets %&gt;%\n  filter(prio_year &gt;= 2010 & prio_year &lt;= 2020) %&gt;%\n  mutate(IPC = substr(IPC, 1, 4))\n\n\n# Création d'une table des IPC uniques\nipc_brevets_unique &lt;- ent_brevets_10_20 %&gt;% distinct()\n\nJointure entre les brevets et les IPC pour créer une base de données complète\n\nbase_complète &lt;- inner_join(ent_fr, ent_brevets_10_20, by = \"appln_id\",relationship = \"many-to-many\")\nbase_complète &lt;- inner_join(base_complète, ipc_descriptions, by = \"IPC\")\n\n\nbase_complète &lt;- base_complète %&gt;% distinct()\n\nRegroupement des données par nom d’application et calcul de diverses statistiques\n\nbase_brevets &lt;- base_complète %&gt;%\n  group_by(app_name) %&gt;%\n  reframe(\n    n_patents = n(),  # Nombre total de brevets par application\n    ipc_main_code = {\n      ipc_counts &lt;- table(IPC)  # Compte des occurrences des codes IPC\n      max_count &lt;- max(ipc_counts)  # Compte maximum\n      main_codes &lt;- names(ipc_counts[ipc_counts == max_count])  # Codes principaux\n      paste(main_codes, collapse = \", \")  # Combinaison des codes principaux\n    },\n    ipc_main_desc = {\n      # Vérification si `ipc_main_code` contient des données valides\n      if (!is.null(ipc_main_code) && ipc_main_code != \"\") {\n        main_codes &lt;- strsplit(ipc_main_code, \", \")[[1]]  # Séparation des codes\n        descs &lt;- sapply(main_codes, function(code) {\n          desc_row &lt;- ipc_descriptions[ipc_descriptions$IPC == code, \"IPC_description\"]\n          if (length(desc_row) &gt; 0) desc_row else NA  # Vérifie l'existence de la description\n        })\n        paste(descs, collapse = \", \")  # Combinaison des descriptions\n      } else {\n        NA  # Aucun code principal trouvé\n      }\n    },\n    ipc_second_code = {\n      ipc_counts &lt;- table(IPC)  # Compte des occurrences des codes IPC\n      sorted_ipc &lt;- sort(ipc_counts, decreasing = TRUE)  # Tri des codes par fréquence\n      if (length(sorted_ipc) &gt; 1) {  # Vérification de l'existence d'un second code\n        second_count &lt;- sorted_ipc[2]  # Compte du deuxième code\n        second_codes &lt;- names(sorted_ipc)[sorted_ipc == second_count]  # Codes du deuxième rang\n        if (length(second_codes) &gt; 1) {\n          NA  # Si plusieurs, renvoie NA\n        } else {\n          second_codes[1]  # Renvoie le deuxième code\n        }\n      } else {\n        NA  # Si pas de deuxième code, renvoie NA\n      }\n    },\n    ipc_second_desc = {\n      if (!is.na(ipc_second_code) && ipc_second_code != \"\") {  # Vérifie si un deuxième code existe\n        desc_row &lt;- ipc_descriptions[ipc_descriptions$IPC == ipc_second_code, \"IPC_description\"]\n        if (length(desc_row) &gt; 0) desc_row else NA  # Récupération de la description\n      } else {\n        NA  # Sinon, renvoie NA\n      }\n    },\n    addr_city_main = {\n      city_counts &lt;- table(city)  # Compte des occurrences des villes\n      if (length(city_counts) &gt; 0) {  # Vérification de l'existence de villes\n        main_city &lt;- names(city_counts)[which.max(city_counts)]  # Ville la plus fréquente\n        main_city  # Renvoie la ville principale\n      } else {\n        NA  # Si aucune ville, renvoie NA\n      }\n    },\n    addr_dept_main = {\n      dept_counts &lt;- table(postal_code)  # Compte des occurrences des départements\n      if (length(dept_counts) &gt; 0) {  # Vérification de l'existence de départements\n        main_dept &lt;- names(dept_counts)[which.max(dept_counts)]  # Département le plus fréquent\n        substr(main_dept, 1, 2)  # Renvoie les deux premiers caractères du code postal\n      } else {\n        NA  # Si aucun département, renvoie NA\n      }\n    }\n  )\n\nRéorganisation et synchronisation des colonnes IPC et leurs descriptions\n\nbase_brevets &lt;- base_brevets %&gt;%\n  mutate(\n    # Séparer les codes IPC et descriptions en listes\n    ipc_main_code_list = str_split(ipc_main_code, \",\\\\s*\"), # Liste des codes\n    ipc_main_desc_list = str_split(ipc_main_desc, \",\\\\s*\"), # Liste des descriptions\n\n    # Garder le premier code et sa description dans ipc_main_code et ipc_main_desc\n    ipc_main_code = sapply(ipc_main_code_list, function(x) x[1]),\n    ipc_main_desc = sapply(ipc_main_desc_list, function(x) x[1]),\n\n    # Remplir ipc_second_code et ipc_second_desc si NA, à partir des deuxièmes éléments\n    ipc_second_code = ifelse(\n      is.na(ipc_second_code) | ipc_second_code == \"\",\n      sapply(ipc_main_code_list, function(x) if (length(x) &gt; 1) x[2] else NA),\n      ipc_second_code\n    ),\n    ipc_second_desc = ifelse(\n      is.na(ipc_second_code) | ipc_second_code == \"\",\n      NA, # Si ipc_second_code est NA, mettre ipc_second_desc à NA\n      ifelse(\n        is.na(ipc_second_desc) | ipc_second_desc == \"\",\n        sapply(ipc_main_desc_list, function(x) if (length(x) &gt; 1) x[2] else NA),\n        ipc_second_desc\n      )\n    )\n  ) %&gt;%\n  select(-ipc_main_code_list, -ipc_main_desc_list) # Supprimer les colonnes temporaires\n\nRenommer la colonne dans base_brevets\n\nbase_brevets &lt;- base_brevets %&gt;%\n  rename(firm_name = app_name)\n\nExportation de la base_brevets au format CSV\n\nwrite.csv(base_brevets, \"base_brevets.csv\", row.names = FALSE)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Bienvenue",
    "section": "",
    "text": "Notre objectif est d’explorer des questions fascinantes telles que : Les entreprises les plus innovantes paient-elles les meilleurs salaires ? Demandent-elles davantage de **data scientists** ou de compétences en ** machine learning ** ? Quels secteurs montrent les plus grandes tendances en termes d’innovation et de recrutement ?\nBienvenue sur notre site web dédié à l’analyse des liens entre innovation d’entreprise et demandes de compétences.\n\nMOIELWAY NGARTI Israël\n\n\n\n\nStatistiques Descriptives\nDécouvrez une analyse détaillée des bases de données, avec des statistiques sur les brevets, les offres d’emploi et leur appariement.\nAnalyse des données\nExplorez les relations entre innovation et demande de compétences grâce à des visualisations créatives, des graphiques et des word clouds."
  },
  {
    "objectID": "index.html#présentation",
    "href": "index.html#présentation",
    "title": "Bienvenue",
    "section": "",
    "text": "Notre objectif est d’explorer des questions fascinantes telles que : Les entreprises les plus innovantes paient-elles les meilleurs salaires ? Demandent-elles davantage de **data scientists** ou de compétences en ** machine learning ** ? Quels secteurs montrent les plus grandes tendances en termes d’innovation et de recrutement ?\nBienvenue sur notre site web dédié à l’analyse des liens entre innovation d’entreprise et demandes de compétences.\n\nMOIELWAY NGARTI Israël"
  },
  {
    "objectID": "index.html#plan-du-site",
    "href": "index.html#plan-du-site",
    "title": "Bienvenue",
    "section": "",
    "text": "Statistiques Descriptives\nDécouvrez une analyse détaillée des bases de données, avec des statistiques sur les brevets, les offres d’emploi et leur appariement.\nAnalyse des données\nExplorez les relations entre innovation et demande de compétences grâce à des visualisations créatives, des graphiques et des word clouds."
  }
]